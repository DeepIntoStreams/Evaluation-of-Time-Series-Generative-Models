---
layout: default
---

<div class="row">
 {% capture x %}
  * [Hao Ni]()
  * [Hang Lou]()
  * [Baoren Xiao]()
  * [Jiajie Tao]()
 {% endcapture %}{{ x | markdownify }}
 </div>

<div class="row">
  <span class="selector">
    <span>Select Purpose: </span>
    <select id="purposeselection" class="selectpicker" multiple data-live-search="true">
      [select][5]
    </select>
  </span>
  <span class="selector">
    <span>Select Authors: </span>
    <select id="authorselection" class="selectpicker" multiple data-live-search="true">
[select][2]

    </select>
  </span>
  <div class="selector">
    <span>Select Year: </span>
    <select id="yearselection" class="selectpicker" multiple data-live-search="true">
 [select][3][desc]
    </select>
  </div>
</div>

[model]
{% assign id = [id] %}
 <hr/>
<!--Post--------------------------------------------------------------------------------------------------------------------------------------------->
{% assign id = id | plus:1 %}
<div class="entry">
	<div class="row">
	  <div class="column1" >
{% capture x %}
[1]
{% endcapture %}{{ x | markdownify }}

<div id="block_container">
		<div id="bloc2">
         <span class="dates"> [3]</span>    
         <span class="authors">[2] </span>
		</div>  
</div>

	  </div>
	  <div class="column2" >
	    <div id="block_container">
		<div id="bloc2">
		<a href="[10]" target="_blank" class="btn btn-info" role="button"> Paper </a>
		</div>  
		<div id="bloc3">		    
		<p>
		<a href="[11,null]" target="_blank" class="btn btn-info" role="button"> Code </a>
		</p>    
		</div>  
	    </div>
	  </div>
	  </div>
	<div class="row">
	  <div class="column1" >
	  </div>
	  <div class="column2">
        	   <div class="tags">
		 	[5]  
		       </div> 

	  </div>
	</div>

<div class="collapse" id="collapse{{ id }}">
{% capture x %}
 
{% endcapture %}{{ x | markdownify }}
</div>
</div>
<!--EndPost--------------------------------------------------------------------------------------------------------------------------------------------->
[model]
<script src="https://utteranc.es/client.js"
        repo="DeepIntoStreams/Time-Series-Generative-Models.github.io"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns" crossorigin="anonymous"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/js/bootstrap-select.min.js"></script>

</div>

<script>

$('#yearselection').change(function (e) {
   	var items = document.getElementsByClassName('entry');
	var tags_selected = $(this).val();
   	for (let i = 0; i < items.length; i++) {
	     var tag_items = items[i].getElementsByClassName("dates")[0];
	     var year_tag = tag_items.textContent.trim().split(',')[2]; 
       console.log(year_tag);
      	const found = tags_selected.some(r=> year_tag.includes(r));
	      if (found || tags_selected.length === 0) {
		items[i].style.display  = 'unset';
	      }
		else {
		items[i].style.display  = 'none';
		}
	    }
})


$('#authorselection').change(function (e) {
   	var items = document.getElementsByClassName('entry');
	var tags_selected = $(this).val();
   	for (let i = 0; i < items.length; i++) {
	     var tag_items = items[i].getElementsByClassName("authors")[0];
	     var item_tags = tag_items.textContent.trim().split(','); 
	     item_tags =  item_tags.map(v => v.replace("\n", '').replace("\t", '').trim());
      	      const found = item_tags.some(r=> tags_selected.includes(r));
	      if (found || tags_selected.length === 0) {
		items[i].style.display  = 'unset';
	      }
		else {
		items[i].style.display  = 'none';
		}
	    }
})
	
$('#purposeselection').change(function (e) {
   	var items = document.getElementsByClassName('entry');
	var tags_selected = $(this).val();
   	for (let i = 0; i < items.length; i++) {
	     var tag_items = items[i].getElementsByClassName("tags")[0];
	     var item_tags = tag_items.textContent.trim().split(','); 
	     item_tags =  item_tags.map(v => v.replace("\n", '').replace("\t", '').trim());
	      console.log("item tags");
	      console.log(item_tags);
      	      const found = item_tags.some(r=> tags_selected.includes(r));
	      if (found || tags_selected.length === 0) {
		items[i].style.display  = 'unset';
	      }
		else {
		items[i].style.display  = 'none';
		}
	    }
})
</script>